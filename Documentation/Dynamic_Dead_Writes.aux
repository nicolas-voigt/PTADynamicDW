\relax 
\providecommand\hyper@newdestlabel[2]{}
\providecommand*\new@tpo@label[2]{}
\providecommand\HyperFirstAtBeginDocument{\AtBeginDocument}
\HyperFirstAtBeginDocument{\ifx\hyper@anchor\@undefined
\global\let\oldcontentsline\contentsline
\gdef\contentsline#1#2#3#4{\oldcontentsline{#1}{#2}{#3}}
\global\let\oldnewlabel\newlabel
\gdef\newlabel#1#2{\newlabelxx{#1}#2}
\gdef\newlabelxx#1#2#3#4#5#6{\oldnewlabel{#1}{{#2}{#3}}}
\AtEndDocument{\ifx\hyper@anchor\@undefined
\let\contentsline\oldcontentsline
\let\newlabel\oldnewlabel
\fi}
\fi}
\global\let\hyper@last\relax 
\gdef\HyperFirstAtBeginDocument#1{#1}
\providecommand\HyField@AuxAddToFields[1]{}
\providecommand\HyField@AuxAddToCoFields[2]{}
\select@language{english}
\@writefile{toc}{\select@language{english}}
\@writefile{lof}{\select@language{english}}
\@writefile{lot}{\select@language{english}}
\@writefile{toc}{\contentsline {section}{\numberline {1}Abstract}{1}{section.1}}
\@writefile{toc}{\contentsline {section}{\numberline {2}Introduction}{1}{section.2}}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.1}Definition: What exactly are DeadWrites?}{1}{subsection.2.1}}
\@writefile{toc}{\contentsline {section}{\numberline {3}Project consists of ...}{2}{section.3}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.1}... our shared repository on Github:}{2}{subsection.3.1}}
\@writefile{lof}{\contentsline {figure}{\numberline {1}{\ignorespaces Shows which files our project originally and currently consists of on "Github".}}{2}{figure.1}}
\newlabel{img:grafik-dummy}{{1}{2}{Shows which files our project originally and currently consists of on "Github"}{figure.1}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.2}... first tests to get familar with Jalangi:}{2}{subsection.3.2}}
\@writefile{lof}{\contentsline {figure}{\numberline {2}{\ignorespaces Shows one of the first examples[6] we tried to reproduce to get more familar with jalangi, after we worked through the Jalangi standard tutorial[6]. That simple analysis counts branches which are executed of e.g a single javascript-function. After understanding how this example analysis works, we automatically had a better idea of what the term "callback function" actually means and what it does.}}{2}{figure.2}}
\newlabel{img:grafik-dummy}{{2}{2}{Shows one of the first examples[6] we tried to reproduce to get more familar with jalangi, after we worked through the Jalangi standard tutorial[6]. That simple analysis counts branches which are executed of e.g a single javascript-function. After understanding how this example analysis works, we automatically had a better idea of what the term "callback function" actually means and what it does}{figure.2}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.3}... our Jalangi-Code-Analysis / Algorithm:}{3}{subsection.3.3}}
\@writefile{lof}{\contentsline {figure}{\numberline {3}{\ignorespaces Provides our code analysis algorithm or the components it consists of. The representation can be understood as a hybrid between class diagram and relationship or sequence diagram, because we also wanted to depict the sequence in which the analysis is run.}}{3}{figure.3}}
\newlabel{img:grafik-dummy}{{3}{3}{Provides our code analysis algorithm or the components it consists of. The representation can be understood as a hybrid between class diagram and relationship or sequence diagram, because we also wanted to depict the sequence in which the analysis is run}{figure.3}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.4}...sampels which contains "DeadWrites"}{4}{subsection.3.4}}
\@writefile{lof}{\contentsline {figure}{\numberline {4}{\ignorespaces Shows the contents of the File "Level1.js", which static and dynamic DeadWrites-Types our written Jalangi-Code-Analysis is able to detect. The file can be found inside the folder tests in our repository(consider Figure 1)}}{4}{figure.4}}
\newlabel{img:grafik-dummy}{{4}{4}{Shows the contents of the File "Level1.js", which static and dynamic DeadWrites-Types our written Jalangi-Code-Analysis is able to detect. The file can be found inside the folder tests in our repository(consider Figure 1)}{figure.4}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {5}{\ignorespaces Shows the output of Test1 - Test3 which are static DeadWrites and Test 4+5 which is static as well as dynamic.}}{4}{figure.5}}
\newlabel{img:grafik-dummy}{{5}{4}{Shows the output of Test1 - Test3 which are static DeadWrites and Test 4+5 which is static as well as dynamic}{figure.5}{}}
\@writefile{toc}{\contentsline {section}{\numberline {4}Results}{5}{section.4}}
\@writefile{toc}{\contentsline {subsection}{\numberline {4.1}Task performed = ${\mathchar "1270}$ and short Result descriptions:}{5}{subsection.4.1}}
\@writefile{lof}{\contentsline {figure}{\numberline {6}{\ignorespaces Shows simply the process how to remove detected deadwrites.}}{5}{figure.6}}
\newlabel{img:grafik-dummy}{{6}{5}{Shows simply the process how to remove detected deadwrites}{figure.6}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {4.2}Overall, what percentage of writes are dead?}{6}{subsection.4.2}}
\@writefile{toc}{\contentsline {subsection}{\numberline {4.3}What is the difference in size (bytes) of the program after removing the dead writes.}{6}{subsection.4.3}}
\@writefile{toc}{\contentsline {subsection}{\numberline {4.4}Is there any noticeable performance improvements after removing the dead writes?}{6}{subsection.4.4}}
\@writefile{toc}{\contentsline {section}{\numberline {5}Completion}{6}{section.5}}
\@writefile{toc}{\contentsline {subsection}{\numberline {5.1}Some Problems which occurred before or during our work}{6}{subsection.5.1}}
\@writefile{toc}{\contentsline {subsection}{\numberline {5.2}Conclusion + Outlook}{6}{subsection.5.2}}
\@writefile{toc}{\contentsline {section}{\numberline {6}References}{7}{section.6}}
\global\@namedef{scr@dte@section@lastmaxnumwidth}{9.42116pt}
\global\@namedef{scr@dte@subsection@lastmaxnumwidth}{18.26904pt}
